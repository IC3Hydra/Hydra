macro True: 1
macro False: 0

# mapping from account address to current balance
data _accountBalances[2^256]

# mapping from account owner to accounts allowed to withdraw specified amounts
data _approvals[2^256][2^256]

# total amount of tokens deposited
data total_supply

data creator

data mintingFinished

def init():
    if ( msg.value != 0 ):
        ~invalid()

    self.creator = msg.sender
    self.mintingFinished = False

def mint(_sender: address, _to: address, _value: uint256):
    if ( msg.value != 0 ):
        ~invalid()

    if ( _sender != self.creator ):
        return(False:bool)

    if ( self.mintingFinished ):
        return(False:bool)

    if ( lt(self.total_supply + _value, self.total_supply) ):
        return(False:bool)

    self._accountBalances[_to] += _value
    self.total_supply += _value

    return(True:bool)


def finishMinting(_sender: address):
    if ( msg.value != 0 ):
        ~invalid()

    if ( _sender != self.creator ):
        return(False:bool)

    self.mintingFinished = True
    return(True:bool)
    
def const totalSupply(_sender: address):
    if ( msg.value != 0 ):
        ~invalid()

    return(self.total_supply:uint256)

def const balanceOf(_sender: address, _owner: address):
    if ( msg.value != 0 ):
        ~invalid()

    return(self._accountBalances[_owner]:uint256)

def transfer(_sender: address, _to: address, _value: uint256):
    if ( msg.value != 0 ):
        ~invalid()

    # sender has enough resources 
    if ( self._accountBalances[_sender] >= _value ):
    
        self._accountBalances[_sender] -= _value
        self._accountBalances[_to] += _value
        return(True:bool)
    
    else:
        return(False:bool)

def transferFrom(_sender: address, _from: address, _to: address, _value: uint256):
    if ( msg.value != 0 ):
        ~invalid()

    # sender is approved to withdraw AND origin account has enough resources
    if ( self._approvals[_from][_sender] >= _value && self._accountBalances[_from] >= _value ):
        self._approvals[_from][_sender] -= _value
        self._accountBalances[_from] -= _value
        self._accountBalances[_to] += _value
        return(True:bool)
    
    else:
        return(False:bool)
    
def approve(_sender: address, _spender: address, _value: uint256):
    if ( msg.value != 0 ):
        ~invalid()

    if ( self._approvals[_sender][_spender] > 0 && _value > 0 ):
        return(False:bool)

    self._approvals[_sender][_spender] = _value
    return(True:bool)

def allowance(_sender: address, _owner: address, _spender: address):
    if ( msg.value != 0 ):
        ~invalid()

    return(self._approvals[_owner][_spender]:uint256)
